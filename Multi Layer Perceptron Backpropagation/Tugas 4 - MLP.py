# -*- coding: utf-8 -*-
"""MLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QPj6J_apuCuu3oQF8GqM59rkHDOAmTaH
"""

from random import seed
from random import random
import math as mt
import csv
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#import file and giving title
idx = ['x1','x2','x3','x4','name']
df = pd.read_csv('iris2.csv', names=idx)

dataset = df.values.tolist()

#representing into binary
for i in dataset:
	if(i[4]=='Iris-setosa'):
		i.append(0)
		i.append(0)
	elif(i[4]=='Iris-versicolor'):
		i.append(1)
		i.append(0)
	else:
		i.append(0)
		i.append(1)
    
#data di suffle     
np.random.shuffle(dataset)

data_train = dataset[:120]
data_val = dataset[120:]

def init_network(n_inputs,n_hiddens,n_outputs):
  network = list()
  hidden_layer = [{'weights':[random() for i in range(n_inputs + 1)]} for i in range(n_hiddens) ]
  network.append(hidden_layer)
  output_layer = [{'weights':[random() for i in range(n_hiddens + 1)]} for i in range(n_outputs)]
  network.append(output_layer)
  return network

#total input[]*weigth[]
def result(weights, inputs):
	res = weights[-1]
	for i in range(len(weights)-1):
		res += weights[i] * inputs[i]
	return res

# activation using sigmoid
def sigmoid(res):
	return 1.0 / (1.0 + mt.exp(-res))

# Forward propagation from input to a network output
def forward(network, row):
	inputs = row
	for layer in network:
		new_inputs = []
		for neuron in layer:
			total = result(neuron['weights'], inputs)
			neuron['output'] = sigmoid(total)
			new_inputs.append(neuron['output'])
		inputs = new_inputs
	return inputs

def sigmoid_dt(output):
	return (output * (1.0 - output))

# Backpropagate 
def backward(network, expected):
	for i in reversed(range(len(network))):
		layer = network[i]
		errors = list()
		if i != len(network)-1:
			for j in range(len(layer)):
				error = 0.0
				for neuron in network[i + 1]:
					error += (neuron['weights'][j] * neuron['delta'])
				errors.append(error)
		else:
			for j in range(len(layer)):
				neuron = layer[j]
				errors.append(expected[j] - neuron['output'])
		for j in range(len(layer)):
			neuron = layer[j]
			neuron['delta'] = errors[j] * sigmoid_dt(neuron['output'])

def train_network(network, train, l_rate, epoch, n_outputs):
	for epoch in range(epoch):
		sum_error = 0
		for row in train:
			outputs = forward(network, row)
			expected = [0 for i in range(n_outputs)]
			expected[row[-1]] = 1
			sum_error += sum([(expected[i]-outputs[i])**2 for i in range(len(expected))])
			backward(network, expected)
			update_weights(network, row, l_rate)
		print('>epoch=%d, lrate=%.3f, error=%.3f' % (epoch, l_rate, sum_error))

def update_weights(net,row,l_rate):
  for i in range(len(net)):
    inputs = row[:4]
    if i != 0:
      inputs = [neuron['output'] for neuron in net[i-1]]
    for neuron in net[i]:
      for j in range(len(inputs)):
        neuron['weights'][j] += l_rate * neuron['delta'] * inputs[j]
      neuron['weights'][-1] += l_rate * neuron['delta']

def predict(outputs):
  pred = list()
  for i in outputs:
    if i>0.5:
      pred.append(1)
    else:
      pred.append(0)
  return pred

n_epoch = 300
network = init_network(4,8,2)
l_rate = 0.1

error_train = list()
acc_train = list()
error_val = list()
acc_val = list()
for epoch in range(n_epoch):
  sum_error = 0
  sum_acc = 0
  for row in data_train:
    outputs = forward(network,row)
    expected = [0 for ex in range(2)]
    expected[0] = row[-2]
    expected[1] = row[-1]
    sum_error += sum([(expected[i]-outputs[i])**2 for i in range(len(expected))])
    if(expected == predict(outputs)):
      sum_acc += 1
    backward(network,expected)
    update_weights(network, row, l_rate)
    
  
  error_train.append(mt.log(sum_error/120))  
  acc_train.append(sum_acc/120)
  
  sum_error = 0
  sum_acc = 0
  for row in data_val:
    outputs = forward(network,row)
    expected = [0 for ex in range(2)]
    expected[0] = row[-2]
    expected[1] = row[-1]
    sum_error += sum([(expected[i]-outputs[i])**2 for i in range(len(expected))])
    if(expected == predict(outputs)):
      sum_acc += 1
    
  
  error_val.append(mt.log(sum_error/30)) 
  acc_val.append(sum_acc/30)

plt.figure(1)
plt.plot(error_train,'r-', label='train')
plt.plot(error_val,'b-', label='validation')
plt.xlabel('epoch')
plt.ylabel('error')
plt.legend(loc='upper right')

plt.figure(2)
plt.plot(acc_train,'r-', label='train')
plt.plot(acc_val,'b-', label='validation')
plt.xlabel('epoch')
plt.ylabel('accuracy')
plt.legend(loc='upper right')